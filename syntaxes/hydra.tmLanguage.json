{
  "scopeName": "source.hydra",
  "name": "Hydra",
  "patterns": [
    { "include": "#functionDefinition" },
    { "include": "#keywords" },
    { "include": "#comments" },
    { "include": "#strings" },
    { "include": "#numbers" },
    { "include": "#booleans" },
    { "include": "#chars" },
    { "include": "#operators" },
    { "include": "#punctuation" },
    { "include": "#identifiers" },
    { "include": "#primitives" }
  ],
  "repository": {
    "functionDefinition": {
      "patterns": [
        {
          "name": "meta.function.hydra",
          "begin": "\\bfn\\s+([a-zA-Z_][a-zA-Z0-9_]*)",
          "beginCaptures": {
            "0": { "name": "keyword.control.hydra" },
            "1": { "name": "entity.name.function.hydra" }
          },
          "end": "(?=\\()",
          "patterns": []
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "match": "\\b(let|const|fn|return|void|in|as|if|else|for|forEach|while|break|skip|include|typedef|struct|None)\\b",
          "name": "keyword.control.hydra"
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "match": "//.*$",
          "name": "comment.line.double-slash.hydra"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "begin": "\"",
          "end": "\"",
          "name": "string.quoted.double.hydra",
          "patterns": [
            { "match": "\\\\.", "name": "constant.character.escape.hydra" }
          ]
        }
      ]
    },
    "chars": {
      "patterns": [
        {
          "match": "'[^'\\\\]'",
          "name": "constant.character.hydra"
        },
        {
          "match": "'\\\\.'",
          "name": "constant.character.escape.hydra"
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "match": "\\b\\d+\\.\\d+\\b",
          "name": "constant.numeric.float.hydra"
        },
        {
          "match": "\\b\\d+\\b",
          "name": "constant.numeric.integer.hydra"
        }
      ]
    },
    "booleans": {
      "patterns": [
        {
          "match": "\\b(true|false)\\b",
          "name": "constant.language.boolean.hydra"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "match": "(==|!=|<=|>=|\\+\\+|--|\\+=|-=|\\*=|/=|%=|&&|\\|\\||=|<|>|\\+|-|\\*|/|%|!|->)",
          "name": "keyword.operator.hydra"
        }
      ]
    },
    "punctuation": {
      "patterns": [
        {
          "match": "[(){}\\[\\]<>|;,.:?&]",
          "name": "punctuation.separator.hydra"
        },
        {
          "match": "(\\.\\.\\.|\\.\\.=?|::)",
          "name": "punctuation.separator.hydra"
        }
      ]
    },
    "identifiers": {
      "patterns": [
        {
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b",
          "name": "variable.other.hydra"
        }
      ]
    },
    "primitives": {
      "patterns": [
        {
          "match": "\\b(i8|i16|i32|i64|u8|u16|u32|u64|f32|f64|char|boolean|string)\\b",
          "name": "storage.type.hydra"
        }
      ]
    }
  }
}
